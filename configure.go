package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/fsnotify/fsnotify"
	"github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/credentials"
)

var (
	watchPath   string
	processName string
	backupDir   string
	endpoint    string
	accessKey   string
	secretKey   string
	bucketName  string
)

func init() {
	flag.StringVar(&watchPath, "watch-path", "", "Path to watch for file changes, if empty will autogenerate game data location")
	flag.StringVar(&processName, "process-name", "RSDragonwilds-Win64-Shipping.exe", "Process name to pause sync when running")
	flag.StringVar(&backupDir, "backup-dir", "", "Directory to store backups, if empty will autogenerate game data location backup folder")
	flag.StringVar(&endpoint, "cloud-endpoint", "localhost:9000", "MinIO/S3 cloud endpoint")
	flag.StringVar(&accessKey, "access-key", "", "Cloud storage access key")
	flag.StringVar(&secretKey, "secret-key", "", "Cloud storage secret key")
	flag.StringVar(&bucketName, "bucket-name", "gamesync-dragonwilds", "Bucket name in cloud storage")
}

func configure() (*minio.Client, *fsnotify.Watcher) {
	flag.Parse()

	if endpoint == "" || accessKey == "" || secretKey == "" || bucketName == "" {
		log.Fatal("missing required arguments")
	}

	// Auto-generate watchPath if not provided
	if watchPath == "" {
		var err error
		watchPath, err = getDefaultWatchPath()
		if err != nil {
			log.Fatal(err)
		}
		log.Printf("watch-path autogenerated to: %s", watchPath)
	}

	// Auto-generate backupDir if not provided
	if backupDir == "" {
		backupDir = filepath.Join(watchPath, "Backup")
		log.Printf("backup-dir autogenerated to: %s", backupDir)
	}

	// Create MinIO client
	client, err := minio.New(endpoint, &minio.Options{
		Creds:  credentials.NewStaticV4(accessKey, secretKey, ""),
		Secure: strings.HasPrefix(endpoint, "https"),
	})
	if err != nil {
		log.Fatal("could not create MinIO client:", err)
	}

	// Create file system watcher
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal("cannot create file system watcher:", err)
	}
	if err := watcher.Add(watchPath); err != nil {
		log.Fatalf("failed to watch path %v: %v", watchPath, err)
	}

	return client, watcher
}

func getDefaultWatchPath() (string, error) {
	localAppData := os.Getenv("LOCALAPPDATA")
	if localAppData == "" {
		return "", fmt.Errorf("LOCALAPPDATA environment variable is not set")
	}
	return filepath.Join(localAppData, "RSDragonwilds", "Saved", "SaveGames"), nil
}
